{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include <cstddef>\n#include <cstdio>\n#include <iostream>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string>\n#include <utility>\n#include <vector>\n\nnamespace irb_adapter {\n  enum camera_index {\n    x_center_low,\n    x_center_hi,\n    y_center_low,\n    y_center_hi,\n    block_width_low,\n    block_width_hi,\n    block_height_low,\n    block_height_hi\n  };\n\n  enum photo_diode_index { diode_number, intensity_value };\n  class adapter {\n  public:\n    struct low_freq_data {\n      uint8_t low_freq_photo_diode = 0;\n      uint8_t low_freq_value = 0;\n    };\n\n    struct hi_freq_data {\n      uint8_t hi_freq_photo_diode = 0;\n      uint8_t hi_freq_value = 0;\n    };\n\n    struct camera_data {\n      uint16_t x_center = 0;\n      uint16_t y_center = 0;\n      uint16_t block_width = 0;\n      uint16_t block_height = 0;\n    };\n\n    adapter(uint8_t p_port) : m_port(p_port) {\n      // make thread to run reads here\n      char port_buffer[12];\n      sprintf(port_buffer, \"/dev/port%u\", m_port);\n      m_port_file = fopen(port_buffer, \"wb+\");\n      if (m_port_file == NULL) {\n        printf(\"Failed opening port\\n\");\n      }\n    }\n\n    low_freq_data get_low_freq_data() {\n      std::vector<char> read_buffer(3);\n      std::vector<char> write_buffer = {'l'};\n      low_freq_data return_data;\n\n      if (request_data(write_buffer, read_buffer)) {\n        // check checksum\n        auto calculated_checksum =\n            read_buffer[diode_number] + read_buffer[intensity_value];\n        if (calculated_checksum != read_buffer.back()) {\n          printf(\"Checksum mismatch...\\n\");\n          return return_data;\n        }\n        return_data.low_freq_photo_diode = (int)read_buffer[diode_number];\n        return_data.low_freq_value = (int)read_buffer[intensity_value] & 0b01111111;\n      }\n      return return_data;\n    }\n\n    hi_freq_data get_hi_freq_data() {\n      std::vector<char> read_buffer(3);\n      std::vector<char> write_buffer = {'h'};\n      hi_freq_data return_data;\n\n      if (request_data(write_buffer, read_buffer)) {\n        // check checksum\n        auto calculated_checksum =\n            read_buffer[diode_number] + read_buffer[intensity_value];\n        if (calculated_checksum != read_buffer.back()) {\n          printf(\"Checksum mismatch...\\n\");\n          return return_data;\n        }\n        return_data.hi_freq_photo_diode = (int)read_buffer[diode_number];\n        return_data.hi_freq_value = (int)read_buffer[intensity_value] & 0b01111111;\n      }\n      return return_data;\n    }\n\n    camera_data get_cam_data() {\n      std::vector<char> read_buffer(9);\n      std::vector<char> write_buffer = {'c'};\n      camera_data return_data;\n\n      if (request_data(write_buffer, read_buffer)) {\n        // check checksum\n        uint8_t calculated_checksum = 0x00;\n        for (size_t i = 0; i < read_buffer.size() - 1; i++) {\n          calculated_checksum += read_buffer[i];\n        }\n        if (calculated_checksum != read_buffer.back()) {\n          printf(\"Checksum mismatch...\\n\");\n          return return_data;\n        }\n        return_data.x_center = ((uint8_t)read_buffer[x_center_hi] << 8) |\n                              (uint8_t)read_buffer[x_center_low];\n        return_data.y_center = ((uint8_t)read_buffer[y_center_hi] << 8) |\n                              (uint8_t)read_buffer[y_center_low];\n        return_data.block_width = ((uint8_t)read_buffer[block_width_hi] << 8) |\n                                  (uint8_t)read_buffer[block_width_low];\n        return_data.block_height = ((uint8_t)read_buffer[block_height_hi] << 8) |\n                                  (uint8_t)read_buffer[block_height_low];\n      }\n      return return_data;\n    }\n\n  private:\n    bool request_data(std::vector<char> &write_buffer,\n                              std::vector<char> &read_buffer) {\n      bool success = true;\n      if (m_port_file == NULL) {\n        printf(\"Port not open...\\n\");\n        return false;\n      }\n\n      auto bytes_written = fwrite(write_buffer.data(), sizeof write_buffer[0],\n                                  write_buffer.size(), m_port_file);\n      if (bytes_written != write_buffer.size()) {\n        printf(\"Failed write to port, %u bytes written.\\n\", bytes_written);\n        success = false;\n      }\n      // wait for data\n      vex::this_thread::sleep_for(85);\n\n      // rudimentary \"timeout\"\n      size_t bytes_read = 0;\n      int attempts = 0;\n      while (attempts < 15 && bytes_read == 0) {\n        bytes_read = fread(&read_buffer[0], 1, read_buffer.size(), m_port_file);\n        attempts++;\n      }\n      if (bytes_read != read_buffer.size()) {\n        printf(\"Failed read from port, %u bytes read.\\n\", bytes_read);\n        success = false;\n      }\n      return success;\n    }\n    uint8_t m_port;\n    FILE *m_port_file;\n  };\n  \n\n} // namespace irb_adapter\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n// Write code for robot here...\n\n}\n","textLanguage":"cpp","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null}}