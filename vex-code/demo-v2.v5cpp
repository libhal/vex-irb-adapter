{"mode":"Text","hardwareTarget":"brain","textContent":"\n#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <math.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n// Robot configuration code.\nmotor left_motor = motor(PORT10, ratio18_1, true);\n\nmotor right_motor = motor(PORT20, ratio18_1, false);\n\n// generating and setting random seed\nvoid initializeRandomSeed()\n{\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nvoid vexcodeInit()\n{\n\n  // Initializing random seed.\n  initializeRandomSeed();\n}\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(char const* soundName)\n{\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n#pragma region IRB Adapter Code\n\n#include <cstddef>\n#include <cstdio>\n#include <iostream>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string>\n#include <utility>\n#include <vector>\n\nnamespace irb_adapter {\nenum camera_index\n{\n  x_center_low,\n  x_center_hi,\n  y_center_low,\n  y_center_hi,\n  block_width_low,\n  block_width_hi,\n  block_height_low,\n  block_height_hi\n};\n\nenum photo_diode_index\n{\n  diode_number,\n  intensity_value\n};\nclass adapter\n{\npublic:\n  struct low_freq_data\n  {\n    uint8_t strongest_photo_diode = 0;\n    uint8_t intensity = 0;\n  };\n\n  struct hi_freq_data\n  {\n    uint8_t strongest_photo_diode = 0;\n    uint8_t intensity = 0;\n  };\n\n  struct camera_data\n  {\n    uint16_t x_center = 0;\n    uint16_t y_center = 0;\n    uint16_t width = 0;\n    uint16_t height = 0;\n  };\n\n  adapter(uint8_t p_port)\n    : m_port(p_port)\n  {\n    // make thread to run reads here\n    char port_buffer[12];\n    sprintf(port_buffer, \"/dev/port%u\", m_port);\n    m_port_file = fopen(port_buffer, \"wb+\");\n    if (m_port_file == NULL) {\n      printf(\"Failed opening port\\n\");\n    }\n  }\n\n  low_freq_data get_low_freq_data()\n  {\n    std::vector<char> read_buffer(3);\n    std::vector<char> write_buffer = { 'l' };\n    low_freq_data return_data;\n\n    if (request_data(write_buffer, read_buffer)) {\n      // check checksum\n      auto calculated_checksum =\n        read_buffer[diode_number] + read_buffer[intensity_value];\n      if (calculated_checksum != read_buffer.back()) {\n        printf(\"Checksum mismatch...\\n\");\n        return return_data;\n      }\n      return_data.strongest_photo_diode = (int)read_buffer[diode_number];\n      return_data.intensity = (int)read_buffer[intensity_value] & 0b01111111;\n    }\n    return return_data;\n  }\n\n  hi_freq_data get_hi_freq_data()\n  {\n    std::vector<char> read_buffer(3);\n    std::vector<char> write_buffer = { 'h' };\n    hi_freq_data return_data;\n\n    if (request_data(write_buffer, read_buffer)) {\n      // check checksum\n      auto calculated_checksum =\n        read_buffer[diode_number] + read_buffer[intensity_value];\n      if (calculated_checksum != read_buffer.back()) {\n        printf(\"Checksum mismatch...\\n\");\n        return return_data;\n      }\n      return_data.strongest_photo_diode = (int)read_buffer[diode_number];\n      return_data.intensity = (int)read_buffer[intensity_value] & 0b01111111;\n    }\n    return return_data;\n  }\n\n  camera_data get_cam_data()\n  {\n    std::vector<char> read_buffer(9);\n    std::vector<char> write_buffer = { 'c' };\n    camera_data return_data;\n\n    if (request_data(write_buffer, read_buffer)) {\n      // check checksum\n      uint8_t calculated_checksum = 0x00;\n      for (size_t i = 0; i < read_buffer.size() - 1; i++) {\n        calculated_checksum += read_buffer[i];\n      }\n      if (calculated_checksum != read_buffer.back()) {\n        printf(\"Checksum mismatch...\\n\");\n        return return_data;\n      }\n      return_data.x_center = ((uint8_t)read_buffer[x_center_hi] << 8) |\n                             (uint8_t)read_buffer[x_center_low];\n      return_data.y_center = ((uint8_t)read_buffer[y_center_hi] << 8) |\n                             (uint8_t)read_buffer[y_center_low];\n      return_data.width = ((uint8_t)read_buffer[block_width_hi] << 8) |\n                          (uint8_t)read_buffer[block_width_low];\n      return_data.height = ((uint8_t)read_buffer[block_height_hi] << 8) |\n                           (uint8_t)read_buffer[block_height_low];\n    }\n    return return_data;\n  }\n\nprivate:\n  bool request_data(std::vector<char>& write_buffer,\n                    std::vector<char>& read_buffer)\n  {\n    bool success = true;\n    if (m_port_file == NULL) {\n      printf(\"Port not open...\\n\");\n      return false;\n    }\n\n    auto bytes_written = fwrite(write_buffer.data(),\n                                sizeof write_buffer[0],\n                                write_buffer.size(),\n                                m_port_file);\n    if (bytes_written != write_buffer.size()) {\n      printf(\"Failed write to port, %u bytes written.\\n\", bytes_written);\n      success = false;\n    }\n    // wait for data\n    vex::this_thread::sleep_for(85);\n\n    // rudimentary \"timeout\"\n    size_t bytes_read = 0;\n    int attempts = 0;\n    while (attempts < 15 && bytes_read == 0) {\n      bytes_read = fread(&read_buffer[0], 1, read_buffer.size(), m_port_file);\n      attempts++;\n    }\n    if (bytes_read != read_buffer.size()) {\n      printf(\"Failed read from port, %u bytes read.\\n\", bytes_read);\n      success = false;\n    }\n    return success;\n  }\n  uint8_t m_port;\n  FILE* m_port_file;\n};\n\n}  // namespace irb_adapter\n\n#pragma endregion IRB Adapter Code\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// vex::motor right_motor = motor(PORT20, ratio18_1, false);\n// vex::motor left_motor = motor(PORT10, ratio18_1, true);\nvex::limit front_bumper = limit(Brain.ThreeWirePort.A);\nbool beacon_pressed = false;\nbool object_collected = false;\n\nenum class state_t\n{\n  find_beacon,\n  backup,\n  find_object,\n};\n\nstate_t state = state_t::find_object;\n\nvoid switch_pressed()\n{\n  state = state_t::backup;\n}\n\nvoid spin(bool clockwise, uint8_t power)\n{\n  if (clockwise) {\n    right_motor.spin(reverse, power, rpm);\n    left_motor.spin(forward, power, rpm);\n  } else {\n    right_motor.spin(forward, power, rpm);\n    left_motor.spin(reverse, power, rpm);\n  }\n}\n\nint error_to_direction(int p_error)\n{\n  if (p_error == 3 || p_error == 4) {\n    return 0;\n  }\n  if (p_error < 3) {\n    return p_error - 3;\n  }\n  return p_error - 4;\n}\n\nint main()\n{\n  int const port_number = 1;\n  irb_adapter::adapter board(port_number);\n  uint8_t threshold = 5;\n  uint8_t power = 40;\n  bool spin_clockwise = false;\n\n  front_bumper.pressed(switch_pressed);\n\n  while (1) {\n    switch (state) {\n      case state_t::find_beacon: {\n        auto low_freq_data = board.get_hi_freq_data();\n        Brain.Screen.clearScreen();\n        Brain.Screen.printAt(10,\n                             20,\n                             \"Low Frequency Beacon: PD %u: %u\",\n                             low_freq_data.strongest_photo_diode,\n                             low_freq_data.intensity);\n        Brain.Screen.printAt(10, 40, \"Camera Data: waiting...\");\n        printf(\"LF %u:%u;\\n\",\n               low_freq_data.strongest_photo_diode,\n               low_freq_data.intensity);\n\n        int direction = low_freq_data.strongest_photo_diode;\n\n        // spin in place if nothing detected\n        if (low_freq_data.intensity < threshold) {\n          spin(spin_clockwise, power);\n        }\n        // Go forward\n        else if (direction == 3 || direction == 4) {\n          right_motor.spin(forward, power, rpm);\n          left_motor.spin(forward, power, rpm);\n        }\n        // Go right\n        else if (direction < 3) {\n          right_motor.spin(forward, power / 3, rpm);\n          left_motor.spin(forward, power, rpm);\n        }\n        // Go left\n        else if (direction > 4) {\n          right_motor.spin(forward, power, rpm);\n          left_motor.spin(forward, power / 3, rpm);\n        }\n        break;\n      }\n      case state_t::backup: {\n        // stop moving\n        right_motor.stop();\n        left_motor.stop();\n        this_thread::sleep_for(1000);\n        // back up for 3 sec\n        right_motor.spin(reverse, 40, rpm);\n        left_motor.spin(reverse, 40, rpm);\n        this_thread::sleep_for(3000);\n        // stop again\n        right_motor.stop();\n        left_motor.stop();\n        state = state_t::find_object;\n        break;\n      }\n      case state_t::find_object: {\n        this_thread::sleep_for(10);\n        auto cam_data = board.get_cam_data();\n        if (cam_data.width == 0 && cam_data.height == 0) {\n          Brain.Screen.printAt(0, 20, \"Object not spotted\");\n          spin(spin_clockwise, 30);\n          this_thread::sleep_for(750);\n          right_motor.stop();\n          left_motor.stop();\n          this_thread::sleep_for(1000);\n          break;\n        }\n\n        Brain.Screen.printAt(0, 20, \"Object spotted!!\");\n\n        constexpr int screen_width = 320;\n        // Max distance from center of screen to either edge of the screen\n        constexpr int max_error = screen_width / 2; \n        constexpr int max_speed = 30;\n        constexpr int standard_speed = max_speed / 2;\n\n        int error = cam_data.x_center - max_error;\n\n        auto speed_reduction = ((error * standard_speed) / max_error) / 2;\n        auto left_speed = standard_speed + speed_reduction;\n        auto right_speed = standard_speed + -speed_reduction;\n        left_motor.spin(forward, left_speed, rpm);\n        right_motor.spin(forward, right_speed, rpm);\n        break;\n      }  \n      default:\n        break;\n    }\n  }\n}\n\n/*\n\n\n\n    // check if bumper pressed\n    if (!beacon_pressed) {\n\n    } else if (beacon_pressed && !object_collected) {\n      auto cam_data = board.get_cam_data();\n      Brain.Screen.clearScreen();\n      Brain.Screen.printAt(10, 20, \"Low Frequency Beacon: Collected\");\n      Brain.Screen.printAt(10, 40, \"Camera Data: %d, %u (%u X %u)\",\n                           cam_data.x_center, cam_data.y_center,\n                           cam_data.width, cam_data.height);\n      printf(\"Camera Data: X:%u Y:%u    %ux%u\\n\", cam_data.x_center,\n             cam_data.y_center, cam_data.width, cam_data.height);\n\n      // spin in place if nothing detected\n      if (cam_data.width== 0) {\n        spin(spin_clockwise, 10);\n      }\n      else if (cam_data.x_center < 150) {\n        spin_clockwise = false;\n        spin(spin_clockwise, 20);\n      }\n      else if (cam_data.x_center > 170) {\n        spin_clockwise = true;\n        spin(spin_clockwise, 20);\n      }\n      // go straight if in middle\n      else {\n        right_motor.spin(forward, 20, rpm);\n        left_motor.spin(forward, 20, rpm);\n      }\n    } else {\n      Brain.Screen.clearScreen();\n      Brain.Screen.printAt(10, 20, \"Low Frequency Beacon: Collected\");\n      Brain.Screen.printAt(10, 40, \"Camera Data: Collected\");\n    }\n  }\n  */\n","textLanguage":"cpp","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.61.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null}}